@startuml
class CourseData [[java:CourseData]] {
	-Vector<CourseRecord> courseData
	+CourseData()
	+void addCourseRecord(CourseRecord courseRecord)
	+void changeCourseRecord(String subjectName, int numOfStudents)
	+Vector<CourseRecord> getUpdate()
}
class Observable [[java:sun.jvm.hotspot.utilities.Observable]] {
}
Observable <|-- CourseData
class BarChartObserver [[java:BarChartObserver]] {
	-Vector<CourseRecord> courseData
	+BarChartObserver(CourseData data)
	+void paint(Graphics g)
	+void update(Observable o)
}
class JPanel [[java:javax.swing.JPanel]] {
}
JPanel <|-- BarChartObserver
interface Observer [[java:java.util.Observer]] {
}
Observer <|.. BarChartObserver
class CourseController [[java:CourseController]] {
	-Vector<JSlider> sliders
	-JPanel coursePanel
	+CourseController(CourseData courses)
	+void addCourse(CourseRecord record)
	+void update(Observable o)
	+void actionPerformed(ActionEvent arg0)
	+void stateChanged(ChangeEvent arg0)
	+{static}void main(String[] args)
}
class CourseData {
}
CourseController --> "1" CourseData : courseData
class JPanel [[java:javax.swing.JPanel]] {
}
JPanel <|-- CourseController
interface Observer [[java:java.util.Observer]] {
}
Observer <|.. CourseController
interface ChangeListener [[java:javax.swing.event.ChangeListener]] {
}
ChangeListener <|.. CourseController
interface ActionListener [[java:java.awt.event.ActionListener]] {
}
ActionListener <|.. CourseController
interface Observer [[java:Observer]] {
	void update(Observable o)
}
abstract class Observable [[java:Observable]] {
	#Vector<Observer> observers
	+Observable()
	+void attach(Observer o)
	+void detach(Observer o)
	+void notifyObservers()
	+{abstract}Object getUpdate()
}

@enduml